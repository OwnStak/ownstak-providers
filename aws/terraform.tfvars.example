# AWS Configuration
aws_region = "us-east-1"

# Unique identifier for this Ownstak backend. 
# Can be used to deploy multiple backends in the same AWS Account / Region -- do not change
# otherwise.
# (14 characters max to avoid AWS resource name limits)
resource_prefix = "ownstak-tf"

# VPC Configuration (use default VPC)
use_default_vpc = true

# VPC Configuration (custom VPC - uncomment if not using default VPC)
# use_default_vpc = false
# vpc_id = "vpc-12345678"
# public_subnet_ids = ["subnet-12345678", "subnet-87654321"]
# private_subnet_ids = ["subnet-11111111", "subnet-22222222"]

# ALB Configuration
# Set to true if the ALB is not exposed to the internet directly.
use_internal_alb = false

# DNS Configuration
# The Ownstak backend requires a wildcard domain to serve your sites.
ownstak_wilcard_domain = "*.example.com"
# If you have a Route53 hosted zone for this domain, the certificate can be generated automatically
# and the CNAME record to the ALB can be created automatically.
# Otherwise, set this to false and you will have to provide the certificate ARN and create the CNAME record to the ALB manually.
# automatic_dns = false
# Optional: Specify the Route53 hosted zone ID (will auto-detect if not provided)
# domain_zone_id = "Z1234567890ABCDEF"

# Cert Configuration
# Option 1: Provide your own certificate ARN
# certificate_arn = "arn:aws:acm:us-east-1:123456789012:certificate/12345678-1234-1234-1234-123456789012"

# Option 2: Let Terraform create the certificate automatically (recommended, but requires automatic_dns = true)
# certificate_arn = null


# ECS Configuration
ecr_image = "public.ecr.aws/ownstak/ownstak-proxy:latest"
# or pin a specific version:
# ecr_image = "public.ecr.aws/ownstak/ownstak-proxy:0.1.13
instance_cpu = 512
instance_memory = 1024
min_instances = 2
max_instances = 6

# VPC S3 Endpoint (optional - for private bucket access)
# vpc_s3_endpoint_id = "vpce-12345678"
